name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort mypy

      - name: Run Black (code formatting check)
        run: black --check --diff src/ tests/
        continue-on-error: true

      - name: Run isort (import sorting check)
        run: isort --check-only --diff src/ tests/
        continue-on-error: true

      - name: Run Flake8 (style guide enforcement)
        run: |
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Pylint (code analysis)
        run: pylint src/**/*.py tests/**/*.py --exit-zero || true
        continue-on-error: true

      - name: Run MyPy (type checking)
        run: |
          pip install -r requirements.txt
          mypy src/ tests/ --ignore-missing-imports --no-strict-optional
        continue-on-error: true

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y portaudio19-dev python3-pyaudio

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests with pytest
        run: |
          pytest --verbose --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
        continue-on-error: true

      - name: Upload coverage reports to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage reports as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-py${{ matrix.python-version }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y portaudio19-dev python3-pyaudio

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Install project dependencies
        run: |
          pip install -e ".[dev]"

      - name: Verify imports
        run: |
          python -c "from ai_navigator import ai_provider; print('✓ ai_provider')"
          python -c "from ai_navigator import amap_mcp_client; print('✓ amap_mcp_client')"
          python -c "from ai_navigator import mcp_browser_server; print('✓ mcp_browser_server')"
          python -c "from ai_navigator import mcp_client; print('✓ mcp_client')"
          python -c "from ai_navigator import voice_recognizer; print('✓ voice_recognizer')"
          python -c "from ai_navigator import main; print('✓ main')"
          echo "✓ All modules can be imported successfully"

      - name: Check code syntax
        run: |
          python -m py_compile src/ai_navigator/*.py
          echo "✓ All Python files have valid syntax"

      - name: Build distribution package
        run: |
          python -m build
          echo "✓ Build completed successfully"

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            dist/
            requirements.txt
            README.md
          retention-days: 7

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit (security linter)
        run: bandit -r src/ -f json -o bandit-report.json || true
        continue-on-error: true

      - name: Run Safety (dependency vulnerability check)
        run: |
          pip install -r requirements.txt
          safety check --json || true
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: bandit-report.json
        if: always()
